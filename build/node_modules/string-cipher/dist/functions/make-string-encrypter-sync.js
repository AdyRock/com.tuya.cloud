"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeStringEncrypterSync = void 0;
const crypto_1 = require("crypto");
const key_length_hint_1 = require("./key-length-hint");
/**
 * Create a sync encrypt function that can be used to encrypt UTF-8 strings,
 * The return function takes plainText and a key to generate encrypted
 * text based on AES-GCM with IV length of 16 and uses pbkdf2 for
 * generating 32 byte (256 bit) Key both SALT and IV are generated using
 * crypto.randomBytes
 * @default
 * * outputEncoding = 'base64',
 * * stringEncoding = 'utf8',
 * * authTagLength = 16,
 * * ivLength = 12,
 * * saltLength = 32,
 * * iterations = 1,
 * * digest = 'sha256'
 * @example
 * ```
 * const encrypt = makeStringEncrypter({});
 * const cipherText = encrypt('some text', 'some password');
 * ```
 * @note
 * Out put string is concatinates salt,iv,authTags and encryptedtext
 * in this precise order as no delimiters are used decrption function
 * should be created with same salt iv and auth tags length
 */
const makeStringEncrypterSync = ({ algorithm, outputEncoding = 'base64', stringEncoding = 'utf8', authTagLength = 16, ivLength = 12, saltLength = 32, iterations = 1, digest = 'sha256' }) => ((text, password) => {
    const iv = crypto_1.randomBytes(ivLength);
    const salt = crypto_1.randomBytes(saltLength);
    const key = crypto_1.pbkdf2Sync(password, salt, iterations, key_length_hint_1.keyLengthHint(algorithm), digest);
    const cipher = crypto_1.createCipheriv(algorithm, key, iv, { authTagLength });
    const cipherText = Buffer.concat([cipher.update(text, stringEncoding), cipher.final()]);
    return Buffer.concat([salt, iv, cipher.getAuthTag(), cipherText]).toString(outputEncoding);
});
exports.makeStringEncrypterSync = makeStringEncrypterSync;
