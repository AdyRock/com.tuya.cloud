"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decryptJson = void 0;
const make_string_decrypter_1 = require("./make-string-decrypter");
const decrypt = make_string_decrypter_1.makeStringDecrypter({ algorithm: 'aes-256-gcm' });
/**
 * An async decrypt function that can be used to decrypt JSON object,
 * This function returns plainText by using a user supplied password
 * @note
 * * inputEncoding = 'base64',
 * * stringEncoding = 'utf8',
 * * authTagLength = 16,
 * * ivLength = 12,
 * * saltLength = 32,
 * * iterations = 1,
 * * digest = 'sha256'
 * @example
 * ```
 * const cipherText = encrypt('some text', 'some password');
 * ```
 * @remark
 * input string should be concatinated as salt,iv,authTags and encryptedtext
 * in this precise order as no delimiters are used decrption function
 * should be created with same salt iv and auth tags length
 */
const decryptJson = (payload, password) => __awaiter(void 0, void 0, void 0, function* () { return JSON.parse(yield decrypt(payload, password)); });
exports.decryptJson = decryptJson;
