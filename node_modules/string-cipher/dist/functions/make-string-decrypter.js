"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeStringDecrypter = void 0;
const crypto_1 = require("crypto");
const key_length_hint_1 = require("./key-length-hint");
const pbkdf2_1 = require("./pbkdf2");
/**
 * Create an async decrypt function that can be used to decrypt UTF-8 strings,
 * The return function takes cipherText and a key to generate pbkdf2Sync
 * text based on AES-GCM with IV length of 16 and uses scryptSync to
 * generate 32 byte (256 bit) Key
 * @default
 * * inputEncoding = 'base64',
 * * stringEncoding = 'utf8',
 * * authTagLength = 16,
 * * ivLength = 12,
 * * saltLength = 32,
 * * iterations = 1,
 * * digest = 'sha256'
 * @example
 * ```
 * const decrypt = makeStringDecrypterSync({});
 * const plainText = decrypt('encrypted message', 'some password');
 * ```
 * @note
 * Use same options as used with makeStringEncrypter
 */
const makeStringDecrypter = ({ algorithm, inputEncoding = 'base64', stringEncoding = 'utf8', authTagLength = 16, ivLength = 12, saltLength = 32, iterations = 1, digest = 'sha256' }) => ((text, password) => __awaiter(void 0, void 0, void 0, function* () {
    const buffer = Buffer.from(text, inputEncoding);
    // data is packed in this sequence [salt iv tag cipherTest]
    const tagStartIndex = saltLength + ivLength;
    const textStartIndex = tagStartIndex + authTagLength;
    const salt = buffer.slice(0, saltLength);
    const iv = buffer.slice(saltLength, tagStartIndex);
    const tag = buffer.slice(tagStartIndex, textStartIndex);
    const cipherText = buffer.slice(textStartIndex);
    const key = yield pbkdf2_1.pbkdf2(password, salt, iterations, key_length_hint_1.keyLengthHint(algorithm), digest);
    const decipher = crypto_1.createDecipheriv(algorithm, key, iv, { authTagLength })
        .setAuthTag(tag);
    return `${decipher.update(cipherText, 'binary', stringEncoding)}${decipher.final(stringEncoding)}`;
}));
exports.makeStringDecrypter = makeStringDecrypter;
